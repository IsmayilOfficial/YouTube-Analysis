knitr::opts_chunk$set(echo = TRUE)
library(tuber)
library(tidyverse)
library(lubridate)
library(stringi)
library(wordcloud)
library(gridExtra)
# = Autentication = #
# # credentials
# # credentials
app_id = '570143920296-d6n69c7bm713edtm3vffmtq46t0751pm.apps.googleusercontent.com'
app_secret = 'DB27e-L6XpKcAOx6UyK1hv0i'
# establishing connecting with YouTube
# credentials
yt_oauth(app_id = app_id, app_secret = app_secret)
# = Download and prepare data = #
# = Channel stats = #
chstat = get_channel_stats("UCbZRdTukTCjFan4onn04sDA")
# = Videos = #
videos = yt_search(term="", type="video", channel_id = "UCbZRdTukTCjFan4onn04sDA")
videos = videos %>%
mutate(date = as.Date(publishedAt)) %>%
filter(date > "2016-01-01") %>%
arrange(date)
# = Comments = #
comments = lapply(as.character(videos$video_id), function(x){
get_comment_threads(c(video_id = x), max_results = 1000)
})
# = Prep the data = #
# = Video Stat Table = #
videostats = lapply(as.character(videos$video_id), function(x){
get_stats(video_id = x)
})
videostats = do.call(rbind.data.frame, videostats)
videostats$title = videos$title
videostats$date = videos$date
videostats = select(videostats, date, title, viewCount, likeCount, dislikeCount, commentCount) %>%
as.tibble() %>%
mutate(viewCount = as.numeric(as.character(viewCount)),
likeCount = as.numeric(as.character(likeCount)),
dislikeCount = as.numeric(as.character(dislikeCount)),
commentCount = as.numeric(as.character(commentCount)))
# = General Stat Table = #
genstat = data.frame(Channel="Dan Vasc", Subcriptions=chstat$statistics$subscriberCount,
Views = chstat$statistics$viewCount,
Videos = chstat$statistics$videoCount, Likes = sum(videostats$likeCount),
Dislikes = sum(videostats$dislikeCount), Comments = sum(videostats$commentCount))
library(tuber)
library(tidyverse)
library(lubridate)
library(stringi)
library(wordcloud)
library(gridExtra)
# = Autentication = #
# # credentials
# # credentials
app_id = '570143920296-d6n69c7bm713edtm3vffmtq46t0751pm.apps.googleusercontent.com'
app_secret = 'DB27e-L6XpKcAOx6UyK1hv0i'
# establishing connecting with YouTube
# credentials
yt_oauth(app_id = app_id, app_secret = app_secret)
view(videostats)
view(comments)
x<- as.data.frame(comments)
x = do.call(rbind.data.frame, comments)
com = do.call(rbind.data.frame, comments)
as.data.frame(comments)
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
if(!require(Rstem)) install_url("http://cran.r-project.org/src/contrib/Archive/Rstem/Rstem_0.4-1.tar.gz")
if(!require(sentiment)) install_url("http://cran.r-project.org/src/contrib/Archive/sentiment/sentiment_0.2.tar.gz")
library(Rstem)
library(sentiment)
library(plotly)
library(dplyr)
library(wordcloud)
xx<- read.csv("commedy_comment.csv")
zaz<- xx$video_id.text
zaz<- na.omit(zaz)
clean_tweets<-zaz
# using sentiment package to classify emotions
emotions <- classify_emotion(clean_tweets, algorithm='bayes')
xx<- read.csv("commedy_comment.csv")
zaz<- xx$comment
zaz<- na.omit(zaz)
clean_tweets<-zaz
# using sentiment package to classify emotions
emotions <- classify_emotion(clean_tweets, algorithm='bayes')
# using sentiment package to classify polarities
polarities = classify_polarity(clean_tweets, algorithm='bayes')
df = data.frame(text=clean_tweets, emotion=emotions[,'BEST_FIT'],
polarity=polarities[,'BEST_FIT'], stringsAsFactors=FALSE)
df<- na.omit(df)
df[is.na(df)] <- "N.A."
# plot the emotions
plot_ly(df, x=~emotion,type="histogram",
marker = list(color = c('grey', 'red',
'orange', 'navy',
'yellow'))) %>%
layout(yaxis = list(title='Count'), title="Sentiment Analysis: Emotions")
plot_ly(df, x=~polarity, type="histogram",
marker = list(color = c('magenta', 'gold',
'lightblue'))) %>%
layout(yaxis = list(title='Count'), title="Sentiment Analysis: Polarity")
# Visualize the words by polarity
df <- df %>%
group_by(polarity) %>%
summarise(pasted=paste(text, collapse=" "))
# remove stopwords
df$pasted = removeWords(df$pasted, stopwords('english'))
# create corpus
corpus = Corpus(VectorSource(df$pasted))
tdm = TermDocumentMatrix(corpus)
tdm = as.matrix(tdm)
colnames(tdm) = df$polarity
# comparison word cloud
comparison.cloud(tdm, colors = brewer.pal(3, 'Dark2'),
scale = c(3,.5), random.order = FALSE, title.size = 1.5)
xx<- read.csv("cooking_comments.csv")
zaz<- xx$comment
zaz<- na.omit(zaz)
clean_tweets<-zaz
# using sentiment package to classify emotions
emotions <- classify_emotion(clean_tweets, algorithm='bayes')
xx<- read.csv("cooking_comments.csv")
xx<- read.csv("cooking_comments.csv")
zaz<- xx$comment
zaz<- na.omit(zaz)
clean_tweets<-zaz
# using sentiment package to classify emotions
emotions <- classify_emotion(clean_tweets, algorithm='bayes')
# using sentiment package to classify polarities
polarities = classify_polarity(clean_tweets, algorithm='bayes')
df = data.frame(text=clean_tweets, emotion=emotions[,'BEST_FIT'],
polarity=polarities[,'BEST_FIT'], stringsAsFactors=FALSE)
df<- na.omit(df)
df[is.na(df)] <- "N.A."
# plot the emotions
plot_ly(df, x=~emotion,type="histogram",
marker = list(color = c('grey', 'red',
'orange', 'navy',
'yellow'))) %>%
layout(yaxis = list(title='Count'), title="Sentiment Analysis: Emotions")
# using sentiment package to classify emotions
emotions <- classify_emotion(clean_tweets, algorithm='bayes')
# using sentiment package to classify polarities
polarities = classify_polarity(clean_tweets, algorithm='bayes')
df = data.frame(text=clean_tweets, emotion=emotions[,'BEST_FIT'],
polarity=polarities[,'BEST_FIT'], stringsAsFactors=FALSE)
df<- na.omit(df)
df[is.na(df)] <- "N.A."
plot_ly(df, x=~polarity, type="histogram",
marker = list(color = c('magenta', 'gold',
'lightblue'))) %>%
layout(yaxis = list(title='Count'), title="Sentiment Analysis: Polarity")
# Visualize the words by polarity
df <- df %>%
group_by(polarity) %>%
summarise(pasted=paste(text, collapse=" "))
# remove stopwords
df$pasted = removeWords(df$pasted, stopwords('english'))
# create corpus
corpus = Corpus(VectorSource(df$pasted))
tdm = TermDocumentMatrix(corpus)
tdm = as.matrix(tdm)
colnames(tdm) = df$polarity
# comparison word cloud
comparison.cloud(tdm, colors = brewer.pal(3, 'Dark2'),
scale = c(3,.5), random.order = FALSE, title.size = 1.5)
xx<- read.csv("music.csv")
xx<- read.csv("music.csv")
zaz<- xx$comment_text
zaz<- na.omit(zaz)
clean_tweets<-zaz
# using sentiment package to classify emotions
emotions <- classify_emotion(clean_tweets, algorithm='bayes')
# using sentiment package to classify polarities
polarities = classify_polarity(clean_tweets, algorithm='bayes')
df = data.frame(text=clean_tweets, emotion=emotions[,'BEST_FIT'],
polarity=polarities[,'BEST_FIT'], stringsAsFactors=FALSE)
df<- na.omit(df)
df[is.na(df)] <- "N.A."
plot_ly(df, x=~polarity, type="histogram",
marker = list(color = c('magenta', 'gold',
'lightblue'))) %>%
layout(yaxis = list(title='Count'), title="Sentiment Analysis: Polarity")
# Visualize the words by polarity
df <- df %>%
group_by(polarity) %>%
summarise(pasted=paste(text, collapse=" "))
# remove stopwords
df$pasted = removeWords(df$pasted, stopwords('english'))
# create corpus
corpus = Corpus(VectorSource(df$pasted))
tdm = TermDocumentMatrix(corpus)
tdm = as.matrix(tdm)
colnames(tdm) = df$polarity
# comparison word cloud
comparison.cloud(tdm, colors = brewer.pal(3, 'Dark2'),
scale = c(3,.5), random.order = FALSE, title.size = 1.5)
xx<- read.csv("Gaming_comments.csv")
zaz<- xx$comment_text
zaz<- na.omit(zaz)
clean_tweets<-zaz
# using sentiment package to classify emotions
emotions <- classify_emotion(clean_tweets, algorithm='bayes')
xx<- read.csv("Gaming_comments.csv")
zaz<- xx$comment
zaz<- na.omit(zaz)
clean_tweets<-zaz
# using sentiment package to classify emotions
emotions <- classify_emotion(clean_tweets, algorithm='bayes')
# using sentiment package to classify polarities
polarities = classify_polarity(clean_tweets, algorithm='bayes')
df = data.frame(text=clean_tweets, emotion=emotions[,'BEST_FIT'],
polarity=polarities[,'BEST_FIT'], stringsAsFactors=FALSE)
df<- na.omit(df)
df[is.na(df)] <- "N.A."
plot_ly(df, x=~polarity, type="histogram",
marker = list(color = c('magenta', 'gold',
'lightblue'))) %>%
layout(yaxis = list(title='Count'), title="Sentiment Analysis: Polarity")
# Visualize the words by polarity
df <- df %>%
group_by(polarity) %>%
summarise(pasted=paste(text, collapse=" "))
# remove stopwords
df$pasted = removeWords(df$pasted, stopwords('english'))
# create corpus
corpus = Corpus(VectorSource(df$pasted))
tdm = TermDocumentMatrix(corpus)
tdm = as.matrix(tdm)
colnames(tdm) = df$polarity
# comparison word cloud
comparison.cloud(tdm, colors = brewer.pal(3, 'Dark2'),
scale = c(3,.5), random.order = FALSE, title.size = 1.5)
xx<- read.csv("movies.csv")
xx<- read.csv("movies.csv")
zaz<- xx$comment_text
zaz<- na.omit(zaz)
clean_tweets<-zaz
# using sentiment package to classify emotions
emotions <- classify_emotion(clean_tweets, algorithm='bayes')
# using sentiment package to classify polarities
polarities = classify_polarity(clean_tweets, algorithm='bayes')
df = data.frame(text=clean_tweets, emotion=emotions[,'BEST_FIT'],
polarity=polarities[,'BEST_FIT'], stringsAsFactors=FALSE)
df<- na.omit(df)
df[is.na(df)] <- "N.A."
xx<- read.csv("movies.csv")
zaz<- xx$comment_text
zaz<- na.omit(zaz)
clean_tweets<-zaz
# using sentiment package to classify emotions
emotions <- classify_emotion(clean_tweets, algorithm='bayes')
# using sentiment package to classify polarities
polarities = classify_polarity(clean_tweets, algorithm='bayes')
df = data.frame(text=clean_tweets, emotion=emotions[,'BEST_FIT'],
polarity=polarities[,'BEST_FIT'], stringsAsFactors=FALSE)
df<- na.omit(df)
df[is.na(df)] <- "N.A."
# plot the emotions
plot_ly(df, x=~emotion,type="histogram",
marker = list(color = c('grey', 'red',
'orange', 'navy',
'yellow'))) %>%
layout(yaxis = list(title='Count'), title="Sentiment Analysis: Emotions")
plot_ly(df, x=~polarity, type="histogram",
marker = list(color = c('magenta', 'gold',
'lightblue'))) %>%
layout(yaxis = list(title='Count'), title="Sentiment Analysis: Polarity")
xx<- read.csv("Pets&AnimalsComments.csv")
zaz<- xx$comment_text
zaz<- na.omit(zaz)
clean_tweets<-zaz
# using sentiment package to classify emotions
emotions <- classify_emotion(clean_tweets, algorithm='bayes')
xx<- read.csv("Pets&AnimalsComments.csv")
zaz<- xx$Comments
zaz<- na.omit(zaz)
clean_tweets<-zaz
# using sentiment package to classify emotions
emotions <- classify_emotion(clean_tweets, algorithm='bayes')
# using sentiment package to classify polarities
polarities = classify_polarity(clean_tweets, algorithm='bayes')
df = data.frame(text=clean_tweets, emotion=emotions[,'BEST_FIT'],
polarity=polarities[,'BEST_FIT'], stringsAsFactors=FALSE)
df<- na.omit(df)
df[is.na(df)] <- "N.A."
# plot the emotions
plot_ly(df, x=~emotion,type="histogram",
marker = list(color = c('grey', 'red',
'orange', 'navy',
'yellow'))) %>%
layout(yaxis = list(title='Count'), title="Sentiment Analysis: Emotions")
plot_ly(df, x=~polarity, type="histogram",
marker = list(color = c('magenta', 'gold',
'lightblue'))) %>%
layout(yaxis = list(title='Count'), title="Sentiment Analysis: Polarity")
# Visualize the words by polarity
df <- df %>%
group_by(polarity) %>%
summarise(pasted=paste(text, collapse=" "))
# remove stopwords
df$pasted = removeWords(df$pasted, stopwords('english'))
# create corpus
corpus = Corpus(VectorSource(df$pasted))
tdm = TermDocumentMatrix(corpus)
tdm = as.matrix(tdm)
colnames(tdm) = df$polarity
# comparison word cloud
comparison.cloud(tdm, colors = brewer.pal(3, 'Dark2'),
scale = c(3,.5), random.order = FALSE, title.size = 1.5)
xx<- read.csv("S&TComments.csv")
xx<- read.csv("S&TComments.csv")
xx<- read.csv("S&TComments.csv")
zaz<- xx$Comments
zaz<- na.omit(zaz)
clean_tweets<-zaz
# using sentiment package to classify emotions
emotions <- classify_emotion(clean_tweets, algorithm='bayes')
xx<- read.csv("S&TComments.csv")
zaz<- xx$Comment
zaz<- na.omit(zaz)
clean_tweets<-zaz
# using sentiment package to classify emotions
emotions <- classify_emotion(clean_tweets, algorithm='bayes')
xx<- read.csv("S&TComments.csv")
zaz<- xx$comment
zaz<- na.omit(zaz)
clean_tweets<-zaz
# using sentiment package to classify emotions
emotions <- classify_emotion(clean_tweets, algorithm='bayes')
# using sentiment package to classify polarities
polarities = classify_polarity(clean_tweets, algorithm='bayes')
df = data.frame(text=clean_tweets, emotion=emotions[,'BEST_FIT'],
polarity=polarities[,'BEST_FIT'], stringsAsFactors=FALSE)
df<- na.omit(df)
df[is.na(df)] <- "N.A."
# plot the emotions
plot_ly(df, x=~emotion,type="histogram",
marker = list(color = c('grey', 'red',
'orange', 'navy',
'yellow'))) %>%
layout(yaxis = list(title='Count'), title="Sentiment Analysis: Emotions")
plot_ly(df, x=~polarity, type="histogram",
marker = list(color = c('magenta', 'gold',
'lightblue'))) %>%
layout(yaxis = list(title='Count'), title="Sentiment Analysis: Polarity")
# Visualize the words by polarity
df <- df %>%
group_by(polarity) %>%
summarise(pasted=paste(text, collapse=" "))
# remove stopwords
df$pasted = removeWords(df$pasted, stopwords('english'))
# create corpus
corpus = Corpus(VectorSource(df$pasted))
tdm = TermDocumentMatrix(corpus)
tdm = as.matrix(tdm)
colnames(tdm) = df$polarity
# comparison word cloud
comparison.cloud(tdm, colors = brewer.pal(3, 'Dark2'),
scale = c(3,.5), random.order = FALSE, title.size = 1.5)
xx<- read.csv("sport_comments.csv")
zaz<- xx$comment
zaz<- na.omit(zaz)
clean_tweets<-zaz
# using sentiment package to classify emotions
emotions <- classify_emotion(clean_tweets, algorithm='bayes')
# using sentiment package to classify polarities
polarities = classify_polarity(clean_tweets, algorithm='bayes')
df = data.frame(text=clean_tweets, emotion=emotions[,'BEST_FIT'],
polarity=polarities[,'BEST_FIT'], stringsAsFactors=FALSE)
df<- na.omit(df)
df[is.na(df)] <- "N.A."
# plot the emotions
plot_ly(df, x=~emotion,type="histogram",
marker = list(color = c('grey', 'red',
'orange', 'navy',
'yellow'))) %>%
layout(yaxis = list(title='Count'), title="Sentiment Analysis: Emotions")
plot_ly(df, x=~polarity, type="histogram",
marker = list(color = c('magenta', 'gold',
'lightblue'))) %>%
layout(yaxis = list(title='Count'), title="Sentiment Analysis: Polarity")
# Visualize the words by polarity
df <- df %>%
group_by(polarity) %>%
summarise(pasted=paste(text, collapse=" "))
# remove stopwords
df$pasted = removeWords(df$pasted, stopwords('english'))
# create corpus
corpus = Corpus(VectorSource(df$pasted))
tdm = TermDocumentMatrix(corpus)
tdm = as.matrix(tdm)
colnames(tdm) = df$polarity
# comparison word cloud
comparison.cloud(tdm, colors = brewer.pal(3, 'Dark2'),
scale = c(3,.5), random.order = FALSE, title.size = 1.5)
xx<- read.csv("travel_comments.csv")
zaz<- xx$comment
zaz<- na.omit(zaz)
clean_tweets<-zaz
# using sentiment package to classify emotions
emotions <- classify_emotion(clean_tweets, algorithm='bayes')
# using sentiment package to classify polarities
polarities = classify_polarity(clean_tweets, algorithm='bayes')
df = data.frame(text=clean_tweets, emotion=emotions[,'BEST_FIT'],
polarity=polarities[,'BEST_FIT'], stringsAsFactors=FALSE)
df<- na.omit(df)
df[is.na(df)] <- "N.A."
# plot the emotions
plot_ly(df, x=~emotion,type="histogram",
marker = list(color = c('grey', 'red',
'orange', 'navy',
'yellow'))) %>%
layout(yaxis = list(title='Count'), title="Sentiment Analysis: Emotions")
plot_ly(df, x=~polarity, type="histogram",
marker = list(color = c('magenta', 'gold',
'lightblue'))) %>%
layout(yaxis = list(title='Count'), title="Sentiment Analysis: Polarity")
# Visualize the words by polarity
df <- df %>%
group_by(polarity) %>%
summarise(pasted=paste(text, collapse=" "))
# remove stopwords
df$pasted = removeWords(df$pasted, stopwords('english'))
# create corpus
corpus = Corpus(VectorSource(df$pasted))
tdm = TermDocumentMatrix(corpus)
tdm = as.matrix(tdm)
colnames(tdm) = df$polarity
# comparison word cloud
comparison.cloud(tdm, colors = brewer.pal(3, 'Dark2'),
scale = c(3,.5), random.order = FALSE, title.size = 1.5)
