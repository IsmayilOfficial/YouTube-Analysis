videos_year$title= gsub("[[:punct:]]", " ", videos_year$title) #removing html tags
videos_year$title = gsub("[ |\t]{2,}", " ", videos_year$title)  # Remove tabs
videos_year$title = gsub("^ ", "", videos_year$title)  # Leading blanks
videos_year$title = gsub(" $", "", videos_year$title)  # Lagging blanks
videos_year$title = gsub(" +", " ", videos_year$title) # General spaces
videos_year$title = tolower(videos_year$title) # lowering all letters
write.csv(videos_year,'Howto_Style2009.csv', row.names = FALSE)
videos_year <- yt_search(term = "", published_before = "2009-12-31T00:00:00Z", video_type ='gaming',
published_after = "2009-01-01T00:00:00Z")
videos_year <- yt_search(term = "Pets & Animals", published_before = "2019-12-31T00:00:00Z",
published_after = "2019-01-01T00:00:00Z")
videostats = lapply(as.character(videos_year$video_id), function(x){
get_stats(video_id = x)
})
library(plyr)
df = ldply(videostats, data.frame)
# merging videos stats with the main file:  videos_year
colnames(df)[1] = 'video_id' # renaming 'id' as video_id so that it matches same coluimn in main table
library(dplyr)
videos_year = videos_year %>% left_join(df, by = 'video_id')
# correcting data type
videos_year[,c('viewCount', 'likeCount', 'dislikeCount', 'favoriteCount', 'commentCount')]=apply(videos_year[,c('viewCount', 'likeCount', 'dislikeCount', 'favoriteCount', 'commentCount')],2,as.numeric)
# converting into data type 'date'
videos_year$publishedAt = as.Date(videos_year$publishedAt)
str(videos_year$publishedAt)
#install.packages("lubridate")
library(lubridate)
# creating new variables 'year' and 'month'
videos_year = videos_year %>% mutate(month = month(publishedAt)) %>% mutate(year = year(publishedAt))
library(tidyverse)  # data manipulation
library(cluster)    # clustering algorithms
#install.packages("factoextra")
library(factoextra) # clustering algorithms & visualization
# cleaning video titles
videos_year$title= gsub("<.*?>","", videos_year$title) #removing html tags
videos_year$title= gsub("[[:punct:]]", " ", videos_year$title) #removing html tags
videos_year$title = gsub("[ |\t]{2,}", " ", videos_year$title)  # Remove tabs
videos_year$title = gsub("^ ", "", videos_year$title)  # Leading blanks
videos_year$title = gsub(" $", "", videos_year$title)  # Lagging blanks
videos_year$title = gsub(" +", " ", videos_year$title) # General spaces
videos_year$title = tolower(videos_year$title) # lowering all letters
write.csv(videos_year,'Pets_Animals2019.csv', row.names = FALSE)
videos_year <- yt_search(term = "People & Blogs", published_before = "2019-12-31T00:00:00Z",
published_after = "2019-01-01T00:00:00Z")
videostats = lapply(as.character(videos_year$video_id), function(x){
get_stats(video_id = x)
})
library(plyr)
df = ldply(videostats, data.frame)
# merging videos stats with the main file:  videos_year
colnames(df)[1] = 'video_id' # renaming 'id' as video_id so that it matches same coluimn in main table
library(dplyr)
videos_year = videos_year %>% left_join(df, by = 'video_id')
# correcting data type
videos_year[,c('viewCount', 'likeCount', 'dislikeCount', 'favoriteCount', 'commentCount')]=apply(videos_year[,c('viewCount', 'likeCount', 'dislikeCount', 'favoriteCount', 'commentCount')],2,as.numeric)
# converting into data type 'date'
videos_year$publishedAt = as.Date(videos_year$publishedAt)
str(videos_year$publishedAt)
#install.packages("lubridate")
library(lubridate)
# creating new variables 'year' and 'month'
videos_year = videos_year %>% mutate(month = month(publishedAt)) %>% mutate(year = year(publishedAt))
library(tidyverse)  # data manipulation
library(cluster)    # clustering algorithms
#install.packages("factoextra")
library(factoextra) # clustering algorithms & visualization
# cleaning video titles
videos_year$title= gsub("<.*?>","", videos_year$title) #removing html tags
videos_year$title= gsub("[[:punct:]]", " ", videos_year$title) #removing html tags
videos_year$title = gsub("[ |\t]{2,}", " ", videos_year$title)  # Remove tabs
videos_year$title = gsub("^ ", "", videos_year$title)  # Leading blanks
videos_year$title = gsub(" $", "", videos_year$title)  # Lagging blanks
videos_year$title = gsub(" +", " ", videos_year$title) # General spaces
videos_year$title = tolower(videos_year$title) # lowering all letters
write.csv(videos_year,'People_Blogs2019.csv', row.names = FALSE)
videos_year <- yt_search(term = "Science & Technology", published_before = "2019-12-31T00:00:00Z",
published_after = "2019-01-01T00:00:00Z")
videostats = lapply(as.character(videos_year$video_id), function(x){
get_stats(video_id = x)
})
library(plyr)
df = ldply(videostats, data.frame)
# merging videos stats with the main file:  videos_year
colnames(df)[1] = 'video_id' # renaming 'id' as video_id so that it matches same coluimn in main table
library(dplyr)
videos_year = videos_year %>% left_join(df, by = 'video_id')
# correcting data type
videos_year[,c('viewCount', 'likeCount', 'dislikeCount', 'favoriteCount', 'commentCount')]=apply(videos_year[,c('viewCount', 'likeCount', 'dislikeCount', 'favoriteCount', 'commentCount')],2,as.numeric)
# converting into data type 'date'
videos_year$publishedAt = as.Date(videos_year$publishedAt)
str(videos_year$publishedAt)
#install.packages("lubridate")
library(lubridate)
# creating new variables 'year' and 'month'
videos_year = videos_year %>% mutate(month = month(publishedAt)) %>% mutate(year = year(publishedAt))
library(tidyverse)  # data manipulation
library(cluster)    # clustering algorithms
#install.packages("factoextra")
library(factoextra) # clustering algorithms & visualization
# cleaning video titles
videos_year$title= gsub("<.*?>","", videos_year$title) #removing html tags
videos_year$title= gsub("[[:punct:]]", " ", videos_year$title) #removing html tags
videos_year$title = gsub("[ |\t]{2,}", " ", videos_year$title)  # Remove tabs
videos_year$title = gsub("^ ", "", videos_year$title)  # Leading blanks
videos_year$title = gsub(" $", "", videos_year$title)  # Lagging blanks
videos_year$title = gsub(" +", " ", videos_year$title) # General spaces
videos_year$title = tolower(videos_year$title) # lowering all letters
write.csv(videos_year,'Science_Technology2019.csv', row.names = FALSE)
install.packages("plotly")
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
if(!require(Rstem)) install_url("http://cran.r-project.org/src/contrib/Archive/Rstem/Rstem_0.4-1.tar.gz")
if(!require(sentiment)) install_url("http://cran.r-project.org/src/contrib/Archive/sentiment/sentiment_0.2.tar.gz")
library(Rstem)
library(sentiment)
library(plotly)
library(dplyr)
library(wordcloud)
f_clean_tweets <- function (tweets) {
clean_tweets = sapply(tweets, function(x) x$getText())
# remove retweet entities
clean_tweets = gsub('(RT|via)((?:\\b\\W*@\\w+)+)', '', clean_tweets)
# remove at people
clean_tweets = gsub('@\\w+', '', clean_tweets)
# remove punctuation
clean_tweets = gsub('[[:punct:]]', '', clean_tweets)
# remove numbers
clean_tweets = gsub('[[:digit:]]', '', clean_tweets)
# remove html links
clean_tweets = gsub('http\\w+', '', clean_tweets)
# remove unnecessary spaces
clean_tweets = gsub('[ \t]{2,}', '', clean_tweets)
clean_tweets = gsub('^\\s+|\\s+$', '', clean_tweets)
# remove emojis or special characters
clean_tweets = gsub('<.*>', '', enc2native(clean_tweets))
clean_tweets = tolower(clean_tweets)
clean_tweets
}
read.csv("Science_Technology2019.csv")
xx<- read.csv("Science_Technology2019.csv")
clean_tweets <- f_clean_tweets(xx$Comment_text)
zaz<- xx$Comment_text
clean_tweets <- f_clean_tweets(zaz)
# removing duplicates due to retweets
clean_tweets <- clean_tweets[!duplicated(zaz)]
# removing duplicates due to retweets
clean_tweets <- zaz[!duplicated(zaz)]
# using sentiment package to classify emotions
emotions <- classify_emotion(clean_tweets, algorithm='bayes')
# using sentiment package to classify polarities
polarities = classify_polarity(clean_tweets, algorithm='bayes')
df = data.frame(text=clean_tweets, emotion=emotions[,'BEST_FIT'],
polarity=polarities[,'BEST_FIT'], stringsAsFactors=FALSE)
df[is.na(df)] <- "N.A."
# plot the emotions
plot_ly(df, x=~emotion,type="histogram",
marker = list(color = c('grey', 'red',
'orange', 'navy',
'yellow'))) %>%
layout(yaxis = list(title='Count'), title="Sentiment Analysis: Emotions")
plot_ly(df, x=~polarity, type="histogram",
marker = list(color = c('magenta', 'gold',
'lightblue'))) %>%
layout(yaxis = list(title='Count'), title="Sentiment Analysis: Polarity")
# Visualize the words by polarity
df <- df %>%
group_by(polarity) %>%
summarise(pasted=paste(text, collapse=" "))
# remove stopwords
df$pasted = removeWords(df$pasted, stopwords('english'))
# create corpus
corpus = Corpus(VectorSource(df$pasted))
tdm = TermDocumentMatrix(corpus)
tdm = as.matrix(tdm)
colnames(tdm) = df$polarity
# comparison word cloud
comparison.cloud(tdm, colors = brewer.pal(3, 'Dark2'),
scale = c(3,.5), random.order = FALSE, title.size = 1.5)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
dat<- read.csv('movies_duration.csv')
View(dat)
dat <- na.omit(dat)
dat = dat[dat$duration < 20 , ]
## Basic histogram from the vector "rating". Each bin is .5 wide.
## These both result in the same output:
ggplot(dat, aes(x=duration)) + geom_histogram(binwidth=.5)
dat<- read.csv('movies_duration.csv')
View(dat)
dat<- read.csv('movies_duration.csv')
View(dat)
library(ggplot2)
dat<- read.csv('movies_duration.csv')
View(dat)
dat <- na.omit(dat)
dat = dat[dat$duration < 20 , ]
## Basic histogram from the vector "rating". Each bin is .5 wide.
## These both result in the same output:
ggplot(dat, aes(x=duration)) + geom_histogram(binwidth=.5)
# qplot(dat$rating, binwidth=.5)
# Draw with black outline, white fill
ggplot(dat, aes(x=duration)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
# Density curve
ggplot(dat, aes(x=duration)) + geom_density()
# Histogram overlaid with kernel density curve
# ggplot(dat, aes(x=duration) +
#     geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
#                    binwidth=.5,
#                    colour="black", fill="white") +
#     geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
library(ggplot2)
dat<- read.csv('movies_duration.csv')
View(dat)
dat <- na.omit(dat)
## Basic histogram from the vector "rating". Each bin is .5 wide.
## These both result in the same output:
ggplot(dat, aes(x=duration)) + geom_histogram(binwidth=.5)
# qplot(dat$rating, binwidth=.5)
# Draw with black outline, white fill
ggplot(dat, aes(x=duration)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
# Density curve
ggplot(dat, aes(x=duration)) + geom_density()
# Histogram overlaid with kernel density curve
# ggplot(dat, aes(x=duration) +
#     geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
#                    binwidth=.5,
#                    colour="black", fill="white") +
#     geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
library(ggplot2)
dat<- read.csv('movies_duration.csv')
View(dat)
dat <- na.omit(dat)
## Basic histogram from the vector "rating". Each bin is .5 wide.
## These both result in the same output:
ggplot(dat, aes(x=duration)) + geom_histogram(binwidth=.5)
# qplot(dat$rating, binwidth=.5)
# Draw with black outline, white fill
ggplot(dat, aes(x=duration)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
# Density curve
ggplot(dat, aes(x=duration)) + geom_density()
# Histogram overlaid with kernel density curve
# ggplot(dat, aes(x=duration) +
#     geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
#                    binwidth=.5,
#                    colour="black", fill="white") +
#     geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
library(ggplot2)
dat<- read.csv('movies_duration.csv')
View(dat)
dat <- na.omit(dat)
dat = dat[dat$duration >100 , ]
## Basic histogram from the vector "rating". Each bin is .5 wide.
## These both result in the same output:
ggplot(dat, aes(x=duration)) + geom_histogram(binwidth=.5)
# qplot(dat$rating, binwidth=.5)
# Draw with black outline, white fill
ggplot(dat, aes(x=duration)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
# Density curve
ggplot(dat, aes(x=duration)) + geom_density()
# Histogram overlaid with kernel density curve
# ggplot(dat, aes(x=duration) +
#     geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
#                    binwidth=.5,
#                    colour="black", fill="white") +
#     geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
library(ggplot2)
dat<- read.csv('movies_duration.csv')
View(dat)
dat <- na.omit(dat)
dat = dat[dat$duration >100 , ]
## Basic histogram from the vector "rating". Each bin is .5 wide.
## These both result in the same output:
ggplot(dat, aes(x=duration)) + geom_histogram(binwidth=.5)
# qplot(dat$rating, binwidth=.5)
# Draw with black outline, white fill
ggplot(dat, aes(x=duration)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
# Density curve
ggplot(dat, aes(x=duration)) + geom_density()
# Histogram overlaid with kernel density curve
# ggplot(dat, aes(x=duration) +
#     geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
#                    binwidth=.5,
#                    colour="black", fill="white") +
#     geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
library(ggplot2)
dat<- read.csv('movies_duration.csv')
dat <- na.omit(dat)
## Basic histogram from the vector "rating". Each bin is .5 wide.
## These both result in the same output:
ggplot(dat, aes(x=duration)) + geom_histogram(binwidth=.5)
# qplot(dat$rating, binwidth=.5)
# Draw with black outline, white fill
ggplot(dat, aes(x=duration)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
# Density curve
ggplot(dat, aes(x=duration)) + geom_density()
# Histogram overlaid with kernel density curve
# ggplot(dat, aes(x=duration) +
#     geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
#                    binwidth=.5,
#                    colour="black", fill="white") +
#     geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
library(ggplot2)
dat<- read.csv('movies_duration.csv')
dat <- na.omit(dat)
#dat = dat[dat$duration >100 , ]
## Basic histogram from the vector "rating". Each bin is .5 wide.
## These both result in the same output:
ggplot(dat, aes(x=duration)) + geom_histogram(binwidth=.5)
# qplot(dat$rating, binwidth=.5)
# Draw with black outline, white fill
ggplot(dat, aes(x=duration)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
# Density curve
ggplot(dat, aes(x=duration)) + geom_density()
# Histogram overlaid with kernel density curve
# ggplot(dat, aes(x=duration) +
#     geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
#                    binwidth=.5,
#                    colour="black", fill="white") +
#     geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
library(ggplot2)
dat<- read.csv('movies_duration.csv')
dat <- na.omit(dat)
#dat = dat[dat$duration >100 , ]
## Basic histogram from the vector "rating". Each bin is .5 wide.
## These both result in the same output:
ggplot(dat, aes(x=duration)) + geom_histogram(binwidth=.5)
# qplot(dat$rating, binwidth=.5)
# Draw with black outline, white fill
ggplot(dat, aes(x=duration)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
# Density curve
ggplot(dat, aes(x=duration)) + geom_density()
# Histogram overlaid with kernel density curve
# ggplot(dat, aes(x=duration) +
#     geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
#                    binwidth=.5,
#                    colour="black", fill="white") +
#     geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
library(ggplot2)
dat<- read.csv('movies_duration.csv')
dat <- na.omit(dat)
dat = dat[dat$duration >150 , ]
## Basic histogram from the vector "rating". Each bin is .5 wide.
## These both result in the same output:
ggplot(dat, aes(x=duration)) + geom_histogram(binwidth=.5)
# qplot(dat$rating, binwidth=.5)
# Draw with black outline, white fill
ggplot(dat, aes(x=duration)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
# Density curve
ggplot(dat, aes(x=duration)) + geom_density()
# Histogram overlaid with kernel density curve
# ggplot(dat, aes(x=duration) +
#     geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
#                    binwidth=.5,
#                    colour="black", fill="white") +
#     geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
library(ggplot2)
dat<- read.csv('movies_duration.csv')
dat <- na.omit(dat)
dat = dat[dat$duration <20 , ]
## Basic histogram from the vector "rating". Each bin is .5 wide.
## These both result in the same output:
ggplot(dat, aes(x=duration)) + geom_histogram(binwidth=.5)
# qplot(dat$rating, binwidth=.5)
# Draw with black outline, white fill
ggplot(dat, aes(x=duration)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
# Density curve
ggplot(dat, aes(x=duration)) + geom_density()
# Histogram overlaid with kernel density curve
# ggplot(dat, aes(x=duration) +
#     geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
#                    binwidth=.5,
#                    colour="black", fill="white") +
#     geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
library(ggplot2)
dat<- read.csv('movies_duration.csv')
dat <- na.omit(dat)
dat = dat[dat$duration <160 , ]
## Basic histogram from the vector "rating". Each bin is .5 wide.
## These both result in the same output:
ggplot(dat, aes(x=duration)) + geom_histogram(binwidth=.5)
# qplot(dat$rating, binwidth=.5)
# Draw with black outline, white fill
ggplot(dat, aes(x=duration)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
# Density curve
ggplot(dat, aes(x=duration)) + geom_density()
# Histogram overlaid with kernel density curve
# ggplot(dat, aes(x=duration) +
#     geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
#                    binwidth=.5,
#                    colour="black", fill="white") +
#     geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
library(ggplot2)
dat<- read.csv('movies_duration.csv')
dat <- na.omit(dat)
#dat = dat[dat$duration <160 , ]
## Basic histogram from the vector "rating". Each bin is .5 wide.
## These both result in the same output:
ggplot(dat, aes(x=duration)) + geom_histogram(binwidth=.5)
# qplot(dat$rating, binwidth=.5)
# Draw with black outline, white fill
ggplot(dat, aes(x=duration)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
# Density curve
ggplot(dat, aes(x=duration)) + geom_density()
# Histogram overlaid with kernel density curve
# ggplot(dat, aes(x=duration) +
#     geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
#                    binwidth=.5,
#                    colour="black", fill="white") +
#     geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
library(ggplot2)
dat<- read.csv('movies_duration.csv')
dat <- na.omit(dat)
#dat = dat[dat$duration <160 , ]
## Basic histogram from the vector "rating". Each bin is .5 wide.
## These both result in the same output:
ggplot(dat, aes(x=duration)) + geom_histogram(binwidth=.5)
# qplot(dat$rating, binwidth=.5)
# Draw with black outline, white fill
ggplot(dat, aes(x=duration)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
# Density curve
ggplot(dat, aes(x=duration)) + geom_density()
library(ggplot2)
dat<- read.csv('movies_duration.csv')
dat <- na.omit(dat)
#dat = dat[dat$duration <160 , ]
## Basic histogram from the vector "rating". Each bin is .5 wide.
## These both result in the same output:
ggplot(dat, aes(x=duration)) + geom_histogram(binwidth=.5)
# qplot(dat$rating, binwidth=.5)
# Draw with black outline, white fill
ggplot(dat, aes(x=duration)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
# Density curve
ggplot(dat, aes(x=duration)) + geom_density()
library(ggplot2)
dat<- read.csv('movies_duration.csv')
dat <- na.omit(dat)
dat = dat[dat$duration >100 , ]
## Basic histogram from the vector "rating". Each bin is .5 wide.
## These both result in the same output:
ggplot(dat, aes(x=duration)) + geom_histogram(binwidth=.5)
# qplot(dat$rating, binwidth=.5)
# Draw with black outline, white fill
ggplot(dat, aes(x=duration)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
# Density curve
ggplot(dat, aes(x=duration)) + geom_density()
library(ggplot2)
dat<- read.csv('movies_duration.csv')
dat <- na.omit(dat)
dat = dat[dat$duration >160 , ]
## Basic histogram from the vector "rating". Each bin is .5 wide.
## These both result in the same output:
ggplot(dat, aes(x=duration)) + geom_histogram(binwidth=.5)
# qplot(dat$rating, binwidth=.5)
# Draw with black outline, white fill
ggplot(dat, aes(x=duration)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
# Density curve
ggplot(dat, aes(x=duration)) + geom_density()
library(ggplot2)
dat<- read.csv('movies_duration.csv')
dat <- na.omit(dat)
dat = dat[dat$duration >170 , ]
## Basic histogram from the vector "rating". Each bin is .5 wide.
## These both result in the same output:
ggplot(dat, aes(x=duration)) + geom_histogram(binwidth=.5)
# qplot(dat$rating, binwidth=.5)
# Draw with black outline, white fill
ggplot(dat, aes(x=duration)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
# Density curve
ggplot(dat, aes(x=duration)) + geom_density()
library(ggplot2)
dat<- read.csv('movies_duration.csv')
dat <- na.omit(dat)
#dat = dat[dat$duration >170 , ]
## Basic histogram from the vector "rating". Each bin is .5 wide.
## These both result in the same output:
ggplot(dat, aes(x=duration)) + geom_histogram(binwidth=.5)
# qplot(dat$rating, binwidth=.5)
# Draw with black outline, white fill
ggplot(dat, aes(x=duration)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
# Density curve
ggplot(dat, aes(x=duration)) + geom_density()
library(ggplot2)
dat<- read.csv('movies_duration.csv')
dat <- na.omit(dat)
#dat = dat[dat$duration >170 , ]
## Basic histogram from the vector "rating". Each bin is .5 wide.
## These both result in the same output:
ggplot(dat, aes(x=duration)) + geom_histogram(binwidth=.5)
# qplot(dat$rating, binwidth=.5)
# Draw with black outline, white fill
ggplot(dat, aes(x=duration)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
# Density curve
ggplot(dat, aes(x=duration)) + geom_density()
